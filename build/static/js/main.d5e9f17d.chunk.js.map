{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","evento","target","name","value","className","action","onSubmit","e","preventDefault","trim","id","uuid","htmlFor","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","actualizandoCitas","filter","useEffect","setItem","stringify","mensaje","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5e9f17d.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\nimport PropTypes from 'prop-types';\r\n//POdemos pasasr el props como tal o usar destructuring y sacar solo la funcion crearcita\r\nconst Formulario = ({crearCita}) => {\r\n    //State para las citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    //State para el error\r\n    const [error,actualizarError] = useState(false)\r\n\r\n    //Funcion del Onchange\r\n    const actualizarState = evento => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [evento.target.name]: evento.target.value\r\n        })\r\n\r\n    }\r\n\r\n    //Valores de la cita\r\n    const {mascota,propietario,fecha,hora,sintomas} = cita;\r\n\r\n    //Funcion agregar cita\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n        // PASOS 1. VALIDAR\r\n        if(mascota.trim() === \"\" ||propietario.trim() === \"\" ||fecha.trim() === \"\" ||hora.trim() === \"\" ||sintomas.trim() === \"\"){\r\n            actualizarError(true);\r\n            return;\r\n            //este return es importante para que no se continue ejecutando el código\r\n        }\r\n        // Reseteo del Aviso de error\r\n        actualizarError(false);\r\n\r\n        //2. ASIGNAR ID - En este caso uso el paquete UUID xq no usamos una base de datos.\r\n        cita.id = uuid();\r\n        //3. Crear CIta\r\n        crearCita(cita);\r\n        //4. Reciniciar el formulario\r\n        // estos se reinician por el atributo value en el input\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            {\r\n                error\r\n                    ? <p className=\"alerta-error\">Todos los campos son obligatorios</p>\r\n                    : null\r\n            }\r\n            <form action=\"\"\r\n                  onSubmit={submitCita}\r\n            >\r\n\r\n                <label htmlFor=\"\">Nombre mascota</label>\r\n                <input type=\"text\"\r\n                       name=\"mascota\"\r\n                       className=\"u-full-width\"\r\n                       placeholder=\"Nombre mascota\"\r\n                       onChange={actualizarState}\r\n                       value={mascota}\r\n                />\r\n                <label htmlFor=\"\">Nombre dueño</label>\r\n                <input type=\"text\"\r\n                       name=\"propietario\"\r\n                       className=\"u-full-width\"\r\n                       placeholder=\"Nombre dueño\"\r\n                       onChange={actualizarState}\r\n                       value={propietario}\r\n                />\r\n                <label htmlFor=\"\">Fecha</label>\r\n                <input type=\"date\"\r\n                       name=\"fecha\"\r\n                       className=\"u-full-width\"\r\n                       onChange={actualizarState}\r\n                       value={fecha}\r\n                />\r\n                <label htmlFor=\"\">Hora</label>\r\n                <input type=\"time\"\r\n                       name=\"hora\"\r\n                       className=\"u-full-width\"\r\n                       onChange={actualizarState}\r\n                       value={hora}\r\n                />\r\n                <label htmlFor=\"\">Sintomas</label>\r\n                <textarea name=\"sintomas\"\r\n                          className=\"u-full-width\"\r\n                          onChange={actualizarState}\r\n                          value={sintomas}\r\n                > </textarea>\r\n                <button type=\"submit\"\r\n                        className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n\r\n            </form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nFormulario.propTypes = {\r\n    crearCita:PropTypes.func\r\n}\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//En el boton debe ser un arrow function para que espere a que se haga el click para ejecutar la funcion\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: {cita.mascota} <span> </span></p>\r\n        <p>Propietario: {cita.propietario} <span> </span></p>\r\n        <p>Fecha: {cita.fecha} <span> </span></p>\r\n        <p>Hora: {cita.hora} <span> </span></p>\r\n        <p>Síntomas: {cita.sintomas} <span> </span></p>\r\n\r\n        <button onClick={() => eliminarCita(cita.id)}\r\n                className=\"button eliminar u-full-width\"\r\n        >ELIMINAR CITA &times;</button>\r\n    </div>\r\n);\r\n\r\nCita.propTypes = {\r\n        cita: PropTypes.object,\r\n        eliminarCita: PropTypes.func\r\n}\r\n\r\nexport default Cita;\r\n","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\n\nfunction App() {\n\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if (!citasIniciales) {\n        citasIniciales = [];\n    }\n\n    //arreglo de citas\n    const [citas, guardarCitas] = useState(citasIniciales);\n    //Función que toma las actuales y agrega la nueva\n    const crearCita = cita => {\n        guardarCitas([...citas, cita])\n    }\n    const eliminarCita = id => {\n        let actualizandoCitas = citas.filter(cita => cita.id !== id);\n        guardarCitas(actualizandoCitas);\n    }\n\n\n    //Use effect para operaciones cuando cambia el state\n    //Se ejecuta cuando se carga el state y cuando cambia\n    //El segundo argumento es el state a observar, en este caso se usa para\n    //almacenar en el localStorage\n    useEffect(() => {\n        let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n        if (citasIniciales) {\n            localStorage.setItem('citas',JSON.stringify(citas))\n        } else {\n            localStorage.setItem('citas',JSON.stringify([]))\n        }\n    }, [citas])\n\n    //Mensaje condicional\n    const mensaje = citas.length === 0 ? \"No hay citas programadas\" : \"Administra tus citas\";\n\n\n    return (\n        <Fragment>\n            <h1>\n                Administrador de citas - Veterinaria\n            </h1>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"one-half column\">\n                        <Formulario\n                            crearCita={crearCita}\n                        />\n                    </div>\n\n                    <div className=\"one-half column\">\n                        <h2>{mensaje}</h2>\n                        {citas.map(cita => (\n                            <Cita\n                                key={cita.id}\n                                cita={cita}\n                                eliminarCita={eliminarCita}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}